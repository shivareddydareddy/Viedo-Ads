version: "3.8"

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SERVER_ID=1
      - ZOO_SERVERS=0.0.0.0:2888:3888
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: bitnami/kafka:2.8
    container_name: kafka
    environment:
      # Zookeeper connection
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      
      # Listeners configuration - This is crucial for proper connectivity
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      
      # Basic Kafka settings
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      
      # Performance and reliability settings
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - KAFKA_CFG_MESSAGE_MAX_BYTES=10485760
      
      # Consumer/Producer settings
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=10485760
      - KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"  # Internal access
      - "9093:9093"  # External access (for development/testing)
    volumes:
      - kafka_data:/bitnami
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:7.0-alpine
    container_name: redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer
    ports:
      - "8080:8080"
    env_file:
      - ./producer/.env
    environment:
      # Override with Docker network addresses
      - KAFKA_BROKER=kafka:9092
      - REDIS_ADDR=redis:6379
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=video_ads
      - PRODUCER_PORT=8080
      - KAFKA_TOPIC=ad_clicks
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    ports:
      - "8081:8081"
    env_file:
      - ./consumer/.env
    environment:
      # Override with Docker network addresses
      - KAFKA_BROKER=kafka:9092
      - REDIS_ADDR=redis:6379
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=video_ads
      - CONSUMER_GROUP=ad_clicks_group
      - KAFKA_TOPIC=ad_clicks
      - CONSUMER_PORT=8081
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Kafka UI for monitoring (useful for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network
    profiles:
      - dev  # Only start with: docker-compose --profile dev up

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local

networks:
  kafka-network:
    driver: bridge
    name: kafka-network